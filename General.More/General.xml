<?xml version="1.0"?>
<doc>
    <assembly>
        <name>General.More</name>
    </assembly>
    <members>
        <member name="T:General.CollectionBase">
            <summary>
            Summary description for Collection.
            </summary>
        </member>
        <member name="M:General.CollectionBase.GetCache">
            <summary>
            This method returns an ArrayList so that other private methods
            can use it. We may want to change this later, but for now everything
            is using an ArrayList and processing it in its own way on the object
            side.
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:General.CollectionBase.SetCache">
            <summary>
            This method returns an ArrayList so that other private methods
            can use it. We may want to change this later, but for now everything
            is using an ArrayList and processing it in its own way on the object
            side.
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:General.CollectionBase.GetEnumerator">
            <summary>
            Gets the Enumerator object
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:General.CollectionBase.Reset">
            <summary>
            Resets the enumeration index
            </summary>
        </member>
        <member name="M:General.CollectionBase.MoveNext">
            <summary>
            Moves to the next object in the enumeration
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:General.CollectionBase.Current">
            <summary>
            Gets the current object
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:General.Debug.Trace(System.String)">
            <summary>
            Attempts to write a trace line
            </summary>
        </member>
        <member name="M:General.Debug.Trace(System.Boolean)">
            <summary>
            Attempts to write a trace line
            </summary>
        </member>
        <member name="M:General.Debug.Trace(System.Data.SqlClient.SqlCommand)">
            <summary>
            Attempts to write a trace line
            </summary>
        </member>
        <member name="M:OAuth.OAuthBase.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Helper function to compute a hash value
            </summary>
            <param name="hashAlgorithm">The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function</param>
            <param name="data">The data to hash</param>
            <returns>a Base64 string of the hash value</returns>
        </member>
        <member name="M:OAuth.OAuthBase.GetQueryParameters(System.String)">
            <summary>
            Internal function to cut out all non oauth query string parameters (all parameters not begining with "oauth_")
            </summary>
            <param name="parameters">The query string part of the Url</param>
            <returns>A list of QueryParameter each containing the parameter name and value</returns>
        </member>
        <member name="M:OAuth.OAuthBase.UrlEncode(System.String)">
            <summary>
            This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.
            While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth
            </summary>
            <param name="value">The value to Url encode</param>
            <returns>Returns a Url encoded string</returns>
        </member>
        <member name="M:OAuth.OAuthBase.NormalizeRequestParameters(System.Collections.Generic.IList{OAuth.OAuthBase.QueryParameter})">
            <summary>
            Normalizes the request parameters according to the spec
            </summary>
            <param name="parameters">The list of parameters already sorted</param>
            <returns>a string representing the normalized parameters</returns>
        </member>
        <member name="M:OAuth.OAuthBase.GenerateSignatureBase(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>        
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The signature type. To use the default values use <see cref="T:OAuth.OAuthBase.SignatureTypes">OAuthBase.SignatureTypes</see>.</param>
            <returns>The signature base</returns>
        </member>
        <member name="M:OAuth.OAuthBase.GenerateSignatureUsingHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Generate the signature value based on the given signature base and hash algorithm
            </summary>
            <param name="signatureBase">The signature based as produced by the GenerateSignatureBase method or by any other means</param>
            <param name="hash">The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:OAuth.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generates a signature using the HMAC-SHA1 algorithm
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:OAuth.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,OAuth.OAuthBase.SignatureTypes,System.String@,System.String@)">
            <summary>
            Generates a signature using the specified signatureType 
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The type of signature to use</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:OAuth.OAuthBase.GenerateTimeStamp">
            <summary>
            Generate the timestamp for the signature        
            </summary>
            <returns></returns>
        </member>
        <member name="M:OAuth.OAuthBase.GenerateNonce">
            <summary>
            Generate a nonce
            </summary>
            <returns></returns>
        </member>
        <member name="T:OAuth.OAuthBase.SignatureTypes">
            <summary>
            Provides a predefined set of algorithms that are supported officially by the protocol
            </summary>
        </member>
        <member name="T:OAuth.OAuthBase.QueryParameter">
            <summary>
            Provides an internal structure to sort the query parameter
            </summary>
        </member>
        <member name="T:OAuth.OAuthBase.QueryParameterComparer">
            <summary>
            Comparer class used to perform the sorting of the query parameters
            </summary>
        </member>
        <member name="T:General.CreditCard">
            <summary>
            General definition for a Credit Card. Testing.. This has been changed 10/6/11
            </summary>
        </member>
        <member name="M:General.CreditCard.#ctor">
            <summary>
            Creates a new Credit Card. All properties must be added
            individually.
            </summary>
        </member>
        <member name="M:General.CreditCard.GetCardType">
            <summary>
            Gets the card type description based off of the card type enumeration set to the instance.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:General.CreditCard.GetCardType(System.String)">
            <summary>
            Gets the CreditCardType based off of the string that is passed in.
            </summary>
            <param name="strCardType">string - A valid CreditCardType Description</param>
            <returns>CreditCardType</returns>
        </member>
        <member name="M:General.CreditCard.Validate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:General.CreditCard.Validate(System.Collections.ArrayList@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:General.CreditCard.CreditCardResponse.#ctor">
            <summary>
            Creates a new Credit Card. All properties must be added
            individually.
            </summary>
        </member>
        <member name="T:General.CreditCard.CreditCardType">
            <summary>
            *** READ THIS IF YOU ARE CHANGING THIS ENUMERATION ***
            
            This enumeration defines accepted payment types. If this enumeration changes, there
            are two methods above under "GetCardType" that must be changed to match as well.
            </summary>
        </member>
        <member name="T:General.DAO.DBConnection">
            <summary>
            This class manages connections to a MSSQL database
            </summary>
        </member>
        <member name="M:General.DAO.DBConnection.#ctor">
            <summary>
            Summary description for DBConnection.
            </summary>
        </member>
        <member name="M:General.DAO.DBConnection.GetConnectionString(System.String)">
            <summary>
            Gets the configured connection string
            </summary>
        </member>
        <member name="M:General.DAO.DBConnection.GetConnectionString_NoHost(System.String)">
            <summary>
            Gets the configured connection string
            </summary>
        </member>
        <member name="M:General.DAO.DBConnection.GetOpenConnection">
            <summary>
            Gets an open connection object from the configured connection string
            </summary>
        </member>
        <member name="M:General.DAO.DBConnection.GetOpenConnection(System.Int32)">
            <summary>
            Gets an open connection object from the configured connection string
            </summary>
        </member>
        <member name="M:General.DAO.DBConnection.GetDynamicDataConnection">
            <summary>
            Gets an open connection object from the configured connection string
            </summary>
        </member>
        <member name="M:General.DAO.DBConnection.GetOpenConnection(System.String)">
            <summary>
            Gets an open connection object from the provided connection string
            </summary>
        </member>
        <member name="T:General.DAO.Debugging.OutputMode">
            <summary>
            OutputMode describing how to display the output information.
            </summary>
        </member>
        <member name="F:General.DAO.Debugging.OutputMode.Trace">
            <summary>
            Outputs the SqlCommand attributes using Trace.Write.
            </summary>
        </member>
        <member name="F:General.DAO.Debugging.OutputMode.Response">
            <summary>
            Outputs the SqlCommand attributes using Response.Write.
            </summary>
        </member>
        <member name="F:General.DAO.Debugging.OutputMode.Exception">
            <summary>
            Throws a new Exception with the SqlCommand output.
            </summary>
        </member>
        <member name="T:General.DAO.Debugging.SqlDebugging">
            <summary>
            Debugging tools specific to the SqlClient Objects.
            </summary>
        </member>
        <member name="M:General.DAO.Debugging.SqlDebugging.OutputCommand(System.Data.SqlClient.SqlCommand,General.DAO.Debugging.OutputMode)">
            <summary>
            Outputs attributes of a SqlCommand.
            </summary>
            <param name="cmd">SqlCommand</param>
            <param name="om">OutputMode</param>
        </member>
        <member name="M:General.DAO.Debugging.SqlDebugging._OutputCommand(System.String,General.DAO.Debugging.OutputMode)">
            <summary>
            Responsible for the actual output to the display.
            </summary>
            <param name="strOutput">string</param>
            <param name="om">OutputMode</param>
        </member>
        <member name="T:General.DAO.SQLCache">
            <summary>
            Summary description for SQLCache.
            </summary>
        </member>
        <member name="M:General.DAO.SQLCache.#ctor">
            <summary>
            Summary description for SQLCache.
            </summary>
        </member>
        <member name="M:General.DAO.SQLCache.GetFromCache(System.String,General.DAO.SQLOptions@)">
            <summary>
            Retrieves an object from the SQLCache
            </summary>
        </member>
        <member name="M:General.DAO.SQLCache.AddToCache(System.String,System.Object,General.DAO.SQLOptions@)">
            <summary>
            Adds an object to the SQLCache
            </summary>
        </member>
        <member name="T:General.DAO.SQLFileCache">
            <summary>
            Summary description for SQLFileCache.
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.#ctor">
            <summary>
            Summary description for SQLFileCache.
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.GetFromFileCache(System.String,General.DAO.SQLOptions@)">
            <summary>
            Get object from SQLFileCache
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.AddToFileCache(System.String,System.Object,General.DAO.SQLOptions@)">
            <summary>
            Get object from SQLFileCache
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.GetCacheFilePath(System.String)">
            <summary>
            Get the FilePath to an object in the SQLFileCache
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.DeleteCacheFile(System.String)">
            <summary>
            Delete an object from the SQLFileCache
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.FileExpired(System.String,General.DAO.SQLOptions@)">
            <summary>
            Returns true if file is expired
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.AddFileExpiration(System.String,General.DAO.SQLOptions@)">
            <summary>
            Adds expiration record to the SQLFileCache
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.DeleteFileExpiration(System.String,General.DAO.SQLOptions@)">
            <summary>
            Removes expiration record from the SQLFileCache
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.GetFileExpirations(General.DAO.SQLOptions@)">
            <summary>
            Gets all expiration records
            </summary>
        </member>
        <member name="M:General.DAO.SQLFileCache.SaveFileExpirations(System.Xml.XmlDocument,General.DAO.SQLOptions@)">
            <summary>
            Saves expiration records
            </summary>
        </member>
        <member name="T:General.DAO.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:General.DAO.SqlHelper.GetQueryHashCode(System.Data.SqlClient.SqlCommand)">
            <summary>
            This method will return a string containing the command text and its parameters.
            </summary>
            <param name="cmd">A valid SqlCommand object</param>
        </member>
        <member name="M:General.DAO.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:General.DAO.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:General.DAO.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:General.DAO.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReturnIdentity(System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns the Identity) against the specified SqlConnection 
            using the SqlCommand.
            </summary>
            <remarks>
            e.g.:  
             long result = ExecuteReturnIdentity(cmd);
            </remarks>
            <param name="cmd">A valid SqlCommand</param>
            <returns>A long representing Return Select_Identity()</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the SqlCommand.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(cmd, true);
            </remarks>
            <param name="cmd">A valid SqlCommand</param>
            <param name="mustCloseConnection">Should the connection be closed upon completion</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes a SqlCommand and attaches a new connection if one hasn't been attached.
            </summary>
            <param name="cmd">SQLCommand - A valid command object with or without a Connection</param>
            <returns>int - Represents the number of rows effected</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the SqlCommand.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, cmd);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="cmd">A valid SqlCommand</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the SqlCommand.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, cmd);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="cmd">A valid SqlCommand</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the SqlCommand.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, cmd, true);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="cmd">A valid SqlCommand</param>
            <param name="mustCloseConnection">Should the connection be closed upon completion</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns a resultset) 
            using the provided Command Object, and all default options.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(cmd);
            </remarks>
            <param name="cmd">A valid SqlCommand </param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlCommand,General.DAO.SQLOptions@)">
            <summary>
            Execute a SqlCommand (that returns a resultset) 
            using the provided Command Object, and the provided SqlOptions.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(cmd, ref o);
            </remarks>
            <param name="cmd">A valid SqlCommand</param>
            <param name="o">A valid reference to a SqlOptions object</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],General.DAO.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, cmd);
            </remarks>
            <param name="cmd">A valid SqlCommand object</param>
            <param name="mustCloseConnection">Will the connection close upon completion</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes a SqlCommand and attaches a new connection if one hasn't been attached.
            </summary>
            <param name="cmd">SQLCommand - A valid command object with or without a Connection</param>
            <returns>object - An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, cmd, true);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="cmd">A valid SqlCommand object</param>
            <param name="mustCloseConnection">Will the connection close upon completion</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters, then closes the connection.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, cmd);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="cmd">A valid SqlCommand object</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that return a 1x1 resultset) using the specified connection string.
            </summary>
            <param name="strConnection">string - a valid connection string</param>
            <param name="cmd">SqlCommand - The command definition</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:General.DAO.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:General.DAO.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:General.DAO.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:General.DAO.SqlHelper.GetQueryString(System.Data.SqlClient.SqlCommand)">
            <summary>
            This method will return a string containing the command text and its parameters.
            </summary>
            <param name="cmd">A valid SqlCommand object</param>
        </member>
        <member name="T:General.DAO.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:General.DAO.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:General.DAO.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:General.DAO.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:General.DAO.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:General.DAO.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:General.DAO.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:General.DAO.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:General.DAO.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:General.DAO.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:General.DAO.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:General.DAO.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:General.DAO.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:General.DAO.SQLMemoryCache">
            <summary>
            SQLMemoryCache
            </summary>
        </member>
        <member name="M:General.DAO.SQLMemoryCache.#ctor">
            <summary>
            SQL Memory Cache
            </summary>
        </member>
        <member name="M:General.DAO.SQLMemoryCache.AddToMemoryCache(System.String,System.Object,General.DAO.SQLOptions@,System.DateTime,System.Boolean)">
            <summary>
            Add to SQL Memory Cache
            </summary>
        </member>
        <member name="M:General.DAO.SQLMemoryCache.AddToMemoryCache(System.String,System.Object,General.DAO.SQLOptions@)">
            <summary>
            Add to SQL Memory Cache
            </summary>
        </member>
        <member name="M:General.DAO.SQLMemoryCache.GetFromMemoryCache(System.String,General.DAO.SQLOptions@)">
            <summary>
            Get from SQL Memory Cache
            </summary>
        </member>
        <member name="M:General.DAO.SQLMemoryCache.OnCacheRemoveCallback(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            OnCacheRemoveCallback
            </summary>
        </member>
        <member name="M:General.DAO.SQLMemoryCache.ClearCache">
            <summary>
            Clears all DataSet objects from the SQL Cache
            </summary>
        </member>
        <member name="M:General.DAO.SQLMemoryCache.ClearCache(System.Data.SqlClient.SqlCommand)">
            <summary>
            Clears the specified DataSet object from the SQL Cache
            </summary>
        </member>
        <member name="P:General.DAO.SQLMemoryCache.CacheCount">
            <summary>
            Returns the number of DataSet objects in the SQL Cache
            </summary>
        </member>
        <member name="P:General.DAO.SQLMemoryCache.CacheSummary">
            <summary>
            Returns a summary of the DataSet objects in the SQL Cache
            </summary>
        </member>
        <member name="T:General.DAO.SQLOptions">
            <summary>
            SQLOptions
            </summary>
        </member>
        <member name="M:General.DAO.SQLOptions.#ctor">
            <summary>
            SQLOptions
            </summary>
        </member>
        <member name="M:General.DAO.SQLOptions.WriteToLog(System.String)">
            <summary>
            Adds a line to the Activity Log
            </summary>
        </member>
        <member name="P:General.DAO.SQLOptions.DoLog">
            <summary>
            Activates the Activity Log
            </summary>
        </member>
        <member name="P:General.DAO.SQLOptions.EmailLog">
            <summary>
            Emails the Activity Log upon completion
            </summary>
        </member>
        <member name="P:General.DAO.SQLOptions.DoMemoryCache">
            <summary>
            Activates Memory Caching
            </summary>
        </member>
        <member name="P:General.DAO.SQLOptions.DoFileCache">
            <summary>
            Activates File Caching
            </summary>
        </member>
        <member name="P:General.DAO.SQLOptions.CloseConnection">
            <summary>
            Should I close the SQLConnection after getting data
            </summary>
        </member>
        <member name="P:General.DAO.SQLOptions.Expiration">
            <summary>
            Sets cache expiration
            </summary>
        </member>
        <member name="P:General.DAO.SQLOptions.ConnectionString">
            <summary>
            Overrides ConnectionString
            </summary>
        </member>
        <member name="P:General.DAO.SQLOptions.ActivityLog">
            <summary>
            Gets the Activity Log
            </summary>
        </member>
        <member name="T:General.DelegateUserControl">
            <summary>
            Summary description for DelegateUserControl.
            </summary>
        </member>
        <member name="T:General.Err">
            <summary>
            CUSTOM ERROR CLASS
            </summary>
        </member>
        <member name="M:General.Err.#ctor">
            <summary>
            Create a new Err Object
            </summary>
        </member>
        <member name="M:General.Err.#ctor(System.String)">
            <summary>
            Create a new Err Object
            </summary>
        </member>
        <member name="M:General.Err.#ctor(System.String,System.Exception)">
            <summary>
            Create a new Err Object
            </summary>
        </member>
        <member name="M:General.Err.ProcessError(System.Exception)">
            <summary>
            For Web Applications only, processes ASP.Net Error
            </summary>
        </member>
        <member name="M:General.Err.ProcessError(General.Err)">
            <summary>
            For Web Applications only, processes ASP.Net Error
            </summary>
        </member>
        <member name="M:General.Err.Process404(System.Exception)">
            <summary>
            For Web Applications only, processes ASP.Net Error
            </summary>
        </member>
        <member name="M:General.Err.ProcessDefault(System.Exception)">
            <summary>
            For Web Applications only, processes ASP.Net Error
            </summary>
        </member>
        <member name="M:General.Err.GetURL(System.String,System.Collections.Hashtable)">
            <summary>
            Constructs and returns a url string
            </summary>
        </member>
        <member name="M:General.Err.ParseQueryString(System.String)">
            <summary>
            Reads a query string and returns a HashTable
            </summary>
        </member>
        <member name="M:General.Err.FindPage(System.String)">
            <summary>
            Returns a corrected page from a list of page redirects
            </summary>
        </member>
        <member name="M:General.Err.FindParam(System.String)">
            <summary>
            Returns a corrected param from a list of param overrides
            </summary>
        </member>
        <member name="F:General.Err._obj_pages">
            <summary>
            A list of pages to redirect
            </summary>
        </member>
        <member name="M:General.Err._LoadPages">
            <summary>
            Populate page reference
            </summary>
        </member>
        <member name="F:General.Err._obj_params">
            <summary>
            A list of params to override
            </summary>
        </member>
        <member name="M:General.Err._LoadParams">
            <summary>
            Populate param reference
            </summary>
        </member>
        <member name="T:General.Exceptions.RecordExistsException">
            <summary>
            CUSTOM ERROR CLASS
            </summary>
        </member>
        <member name="M:General.Exceptions.RecordExistsException.#ctor(System.String)">
            <summary>
            Create a new Err Object
            </summary>
        </member>
        <member name="M:General.Exceptions.RecordExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new Err Object
            </summary>
        </member>
        <member name="T:ExtendedControls.RepeaterExtended">
            <summary>
            Extends the normal Repeater so we can determine do cool things like find elements inside it.
            </summary>
        </member>
        <member name="T:ExtendedControls.LinkButtonExtended">
            <summary>
            Extends the normal LinkButton so we can determine do cool things like add a confirm dialogue.
            </summary>
        </member>
        <member name="T:ExtendedControls.DumbMenu">
            <summary>
            This is a custom ASP:Menu control that disables the javascript
            </summary>
        </member>
        <member name="T:General.GPS.GPSCoordinate">
            <summary>
            Contains information about a GPS Coordinate
            Longitude, Latitude, and Altitude
            </summary>
        </member>
        <member name="M:General.GPS.GPSCoordinate.ToString">
            <summary>
            Output class data in string format
            </summary>
        </member>
        <member name="M:General.GPS.GPSCoordinate.ToString(System.String)">
            <summary>
            Output class data in string format
            </summary>
        </member>
        <member name="M:General.GPS.GPSCoordinate.op_Equality(General.GPS.GPSCoordinate,General.GPS.GPSCoordinate)">
            <summary>
            Compares two GPSCoordinate objects
            </summary>
        </member>
        <member name="M:General.GPS.GPSCoordinate.op_Inequality(General.GPS.GPSCoordinate,General.GPS.GPSCoordinate)">
            <summary>
            Compares two GPSCoordinate objects
            </summary>
        </member>
        <member name="M:General.GPS.GPSCoordinate.op_Implicit(General.GPS.GPSCoordinate)~System.String">
            <summary>
            Casts an GPSCoordinate as a string
            </summary>
        </member>
        <member name="M:General.GPS.GPSCoordinate.Equals(System.Object)">
            <summary>
            Compares two GPSCoordinate objects
            </summary>
        </member>
        <member name="M:General.GPS.GPSCoordinate.GetDistance(General.GPS.GPSCoordinate,General.GPS.GPSCoordinate)">
            <summary>
            Calculates the distance between two GPS points, and returns a Distance object.
            </summary>
            <param name="objStart">Coordinate 1</param>
            <param name="objEnd">Coordinate 2</param>
            <returns>Distance</returns>
        </member>
        <member name="T:General.HierarchicalModelCollection">
            <summary>
            Summary description for HierarchicalModelCollection.
            </summary>
        </member>
        <member name="T:General.GenericNameValueCollection`1">
            <typeparam name="valueT">Value type.</typeparam>
        </member>
        <member name="M:General.GenericNameValueCollection`1.#ctor">
            <summary>
            Cretaes an empty collection.
            </summary>
        </member>
        <member name="M:General.GenericNameValueCollection`1.#ctor(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates a collection from the IDictionary elements.
            </summary>
            <param name="dic">IDictionary object.</param>
            <param name="readOnly">Use TRUE to create a read-only collection.</param>
        </member>
        <member name="M:General.GenericNameValueCollection`1.GetAsInteger(System.String)">
            <summary>
            Gets a value for the given key, and casts as an Integer.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:General.GenericNameValueCollection`1.GetAsDouble(System.String)">
            <summary>
            Gets a value for the given key, and casts as a Double.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:General.GenericNameValueCollection`1.GetAsBoolean(System.String)">
            <summary>
            Gets a value for the given key, and casts as a Boolean.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:General.GenericNameValueCollection`1.GetAsDateTime(System.String)">
            <summary>
            Gets a value for the given key, and casts as a DateTime.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:General.GenericNameValueCollection`1.GetAsPhoneNumber(System.String)">
            <summary>
            Gets a value for the given key, and casts as a PhoneNumber.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:General.GenericNameValueCollection`1.GetAsEmailAddress(System.String)">
            <summary>
            Gets a value for the given key, and casts as an EmailAddress.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:General.GenericNameValueCollection`1.GetAsURL(System.String)">
            <summary>
            Gets a value for the given key, and casts as a URL.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:General.GenericNameValueCollection`1.Add(System.String,`0)">
            <summary>
            Adds an entry to the collection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:General.GenericNameValueCollection`1.Remove(System.String)">
            <summary>
            Removes an entry with the specified key from the collection.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:General.GenericNameValueCollection`1.Remove(System.Int32)">
            <summary>
            Removes an entry in the specified index from the collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:General.GenericNameValueCollection`1.Clear">
            <summary>
            Clears all the elements in the collection.
            </summary>
        </member>
        <member name="M:General.GenericNameValueCollection`1.GetEnumerator">
            <summary>
            Gets the Enumerator object
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:General.GenericNameValueCollection`1.Reset">
            <summary>
            Resets the enumeration index
            </summary>
        </member>
        <member name="M:General.GenericNameValueCollection`1.MoveNext">
            <summary>
            Moves to the next object in the enumeration
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:General.GenericNameValueCollection`1.Item(System.Int32)">
            <summary>
            Gets a value using an index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:General.GenericNameValueCollection`1.Item(System.String)">
            <summary>
            Gets or sets a value for the given key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:General.GenericNameValueCollection`1.AllKeys">
            <summary>
            Gets an array containing all the keys in the collection.
            </summary>
        </member>
        <member name="P:General.GenericNameValueCollection`1.AllValues">
            <summary>
            Gets an object array that contains all the values in the collection.
            </summary>
        </member>
        <member name="P:General.GenericNameValueCollection`1.HasKeys">
            <summary>
            Gets a value indicating if the collection contains keys that are not null.
            </summary>
        </member>
        <member name="P:General.GenericNameValueCollection`1.Current">
            <summary>
            Gets the current object
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:General.PaginationManager">
            <summary>
            General::PaginationManager
            Object facilitates Pagination of a DataTable object
            Use with PagingCollectionBase for Pagination of a Collection
            </summary>
        </member>
        <member name="F:General.PaginationManager.NotifyPageChange">
            <summary>
            += to this property to add more PageChange listeners
            </summary>
        </member>
        <member name="M:General.PaginationManager.GoToNextPage">
            <summary>
            Move to the next page
            </summary>
        </member>
        <member name="M:General.PaginationManager.GoToPreviousPage">
            <summary>
            Move to the previous page
            </summary>
        </member>
        <member name="M:General.PaginationManager.GoToFirstPage">
            <summary>
            Move to the first page
            </summary>
        </member>
        <member name="M:General.PaginationManager.GoToLastPage">
            <summary>
            Move to the last page
            </summary>
        </member>
        <member name="M:General.PaginationManager.GoToPage(System.Int16)">
            <summary>
            Move to specified page
            </summary>
        </member>
        <member name="M:General.PaginationManager.#ctor(System.Data.DataTable)">
            <summary>
            Construct a PaginationManager object 
            Defaults to first page
            Does not impliment PageChangeDelegate
            </summary>
        </member>
        <member name="M:General.PaginationManager.#ctor(System.Data.DataTable,System.Int16,System.Int16)">
            <summary>
            Construct a PaginationManager object 
            Starts at specified page
            Does not impliment PageChangeDelegate
            </summary>
        </member>
        <member name="M:General.PaginationManager.#ctor(System.Data.DataTable,System.Int16,System.Int16,General.PaginationManager.PageChangeDelegate)">
            <summary>
            Construct a PaginationManager object 
            Starts at specified page
            Fires PageChangeDelegate on parent object
            </summary>
        </member>
        <member name="M:General.PaginationManager.ToString">
            <summary>
            ToString assumes HTML line break
            </summary>
        </member>
        <member name="M:General.PaginationManager.ToString(System.String)">
            <summary>
            ToString with specified line break
            </summary>
        </member>
        <member name="M:General.PaginationManager.ToDebuggingString">
            <summary>
            ToString assumes HTML line break
            </summary>
        </member>
        <member name="M:General.PaginationManager.ToDebuggingString(System.String)">
            <summary>
            ToString with specified line break
            </summary>
        </member>
        <member name="P:General.PaginationManager.URL">
            <summary>
            Optional property for storing a URL with a PaginationManager object
            </summary>
        </member>
        <member name="P:General.PaginationManager.CurrentPage">
            <summary>
            Current page index
            </summary>
        </member>
        <member name="P:General.PaginationManager.RowsPerPage">
            <summary>
            Rows Per Page
            </summary>
        </member>
        <member name="P:General.PaginationManager.TotalPages">
            <summary>
            Number of pages
            </summary>
        </member>
        <member name="P:General.PaginationManager.CurrentPageData">
            <summary>
            DataTable object with rows from current page
            </summary>
        </member>
        <member name="P:General.PaginationManager.SourceData">
            <summary>
            Original DataTable
            </summary>
        </member>
        <member name="T:General.PaginationManager.PageChangeDelegate">
            <summary>
            Delegate used to notify a higher object of a page change
            </summary>
        </member>
        <member name="T:General.PagingCollectionBase">
            <summary>
            Summary description for PagingCollectionBase.
            </summary>
        </member>
        <member name="M:General.PagingCollectionBase.GetCache">
            <summary>
            This method returns an ArrayList so that other private methods
            can use it. We may want to change this later, but for now everything
            is using an ArrayList and processing it in its own way on the object
            side.
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:General.PagingCollectionBase.SetCache">
            <summary>
            This method returns an ArrayList so that other private methods
            can use it. We may want to change this later, but for now everything
            is using an ArrayList and processing it in its own way on the object
            side.
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:General.PagingCollectionBase.GetEnumerator">
            <summary>
            Gets the Enumerator object
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:General.PagingCollectionBase.Reset">
            <summary>
            Resets the enumeration index
            </summary>
        </member>
        <member name="M:General.PagingCollectionBase.MoveNext">
            <summary>
            Moves to the next object in the enumeration
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:General.PagingCollectionBase.Current">
            <summary>
            Gets the current object
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:General.DAO.SqlConvert">
            <summary>
            Conversion functions that default values when catching DBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.#ctor">
            <summary>
            Conversion functions that default values when catching DBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Object)">
            <summary>
            Convert an object into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Collections.ArrayList)">
            <summary>
            Convert an XMLNameValueCollection into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(General.Model.PostalAddress)">
            <summary>
            Convert an XMLNameValueCollection into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(General.XMLNameValueCollection)">
            <summary>
            Convert an XMLNameValueCollection into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(General.SimpleXMLNameValueCollection)">
            <summary>
            Convert a SimpleXMLNameValueCollection into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(General.Model.PhoneNumber)">
            <summary>
            Convert a string into a PhoneNumber object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(General.Model.EmailAddress)">
            <summary>
            Convert a string into a EmailAddress object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(General.Model.URL)">
            <summary>
            Convert a string into a URL object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.String)">
            <summary>
            Convert a string into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Int32)">
            <summary>
            Convert an integer into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Int32,System.Int32)">
            <summary>
            Convert an integer into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Int16)">
            <summary>
            Convert an integer into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Int64)">
            <summary>
            Convert an integer into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Double)">
            <summary>
            Convert a double into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Double,System.Double)">
            <summary>
            Convert an double into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Decimal)">
            <summary>
            Convert a double into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Single)">
            <summary>
            Convert a double into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.Boolean)">
            <summary>
            Convert an integer into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(General.ShortGuid)">
            <summary>
            Convert a ShortGuid into a sql UniqueIdentifier object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSqlYesNo(System.Boolean)">
            <summary>
            Convert an integer into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.DateTime)">
            <summary>
            Convert a DataTime into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSql(System.DateTime,System.DateTime)">
            <summary>
            Convert a DataTime into a sql object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.Parse(System.String)">
            <summary>
            Fix quotes for sql query strings
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToShortGuid(System.Object)">
            <summary>
            Fix quotes for sql query strings
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToNumber(System.Object)">
            <summary>
            Fix quotes for sql query strings
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToInt64(System.Object)">
            <summary>
            Returns 0 if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToInt32(System.Object)">
            <summary>
            Returns 0 if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToInt16(System.Object)">
            <summary>
            Returns 0 if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToString(System.Object)">
            <summary>
            Returns String.Empty if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToType(System.Object)">
            <summary>
            Returns System.Type
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToSingle(System.Object)">
            <summary>
            Returns 0 if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToDouble(System.Object)">
            <summary>
            Returns 0 if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToByte(System.Object)">
            <summary>
            Returns 0 if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToDecimal(System.Object)">
            <summary>
            Returns 0 if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToDateTime(System.Object)">
            <summary>
            Returns SqlConvert.ToDateTime(null) if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToBoolean(System.Object)">
            <summary>
            Returns false if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToChar(System.Object)">
            <summary>
            Returns new char() if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToPhoneNumber(System.Object)">
            <summary>
            Returns new PhoneNumber() if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToEmailAddress(System.Object)">
            <summary>
            Returns new EmailAddress() if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToURL(System.Object)">
            <summary>
            Returns new URL() if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToXML(System.Object)">
            <summary>
            Returns new XmlDocument() if object IsDBNull
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.ToPostalAddress(System.Object)">
            <summary>
            Returns PostalAddress from object
            </summary>
        </member>
        <member name="M:General.DAO.SqlConvert.MinDate">
            <summary>
            Returns the smallest DateTime that SQL Server can use.
            "1/1/1753 12:00:00 AM"
            </summary>
            <returns>DateTime</returns>
        </member>
        <member name="M:General.DAO.SqlConvert.MaxDate">
            <summary>
            Returns the largest DateTime that SQL Server can use.
            "12/31/9999 11:59:59 PM"
            </summary>
            <returns>DateTime</returns>
        </member>
        <member name="T:General.Utilities.Array.ArrayTools">
            <summary>
            Array Tools
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.#ctor">
            <summary>
            Array Tools
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.Contains(System.Object[],System.Object)">
            <summary>
            Returns true if an array contains a specified value
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.Contains(System.Int32[],System.Int32)">
            <summary>
            Returns true if an array contains a specified value
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.Contains(System.String[],System.String)">
            <summary>
            Returns true if an array contains a specified value
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.Contains(System.Double[],System.Double)">
            <summary>
            Returns true if an array contains a specified value
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.Contains(General.Model.EmailAddress[],General.Model.EmailAddress)">
            <summary>
            Returns true if an array contains a specified value
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.Contains(General.Model.PhoneNumber[],General.Model.PhoneNumber)">
            <summary>
            Returns true if an array contains a specified value
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.Join(System.String[],System.String)">
            <summary>
            Returns a string with the contents of an array
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.Join(System.Int32[],System.String)">
            <summary>
            Returns a string with the contents of an array
            </summary>
        </member>
        <member name="M:General.Utilities.Array.ArrayTools.Join(System.Double[],System.String)">
            <summary>
            Returns a string with the contents of an array
            </summary>
        </member>
        <member name="T:General.Utilities.Array.HashTools">
            <summary>
            Utilities to help handle the Hashtable object.
            </summary>
        </member>
        <member name="T:General.Utilities.Barcode.BarcodeGenerator">
            <summary>
            Contains static methods for generating barcode image files.
            Requires font files to be installed on server.
            FREE3OF9.TTF 
            FREE3OF9X.TTF
            </summary>
        </member>
        <member name="M:General.Utilities.Barcode.BarcodeGenerator.#ctor">
            <summary>
            Contains static methods for generating barcode image files.
            </summary>
        </member>
        <member name="M:General.Utilities.Barcode.BarcodeGenerator.Generate(System.String,System.String,System.String)">
            <summary>
            Creates a barcode of the specified type in the specified file.
            </summary>
        </member>
        <member name="M:General.Utilities.Barcode.BarcodeGenerator.Generate(System.String,System.String,System.IO.Stream)">
            <summary>
            Outputs a barcode of the specified type to a Stream object.
            </summary>
        </member>
        <member name="M:General.Utilities.Barcode.BarcodeGenerator.Generate(System.String,General.Utilities.Barcode.BarcodeType,System.String)">
            <summary>
            Creates a barcode of the specified type in the specified file.
            </summary>
        </member>
        <member name="M:General.Utilities.Barcode.BarcodeGenerator.Generate(System.String,General.Utilities.Barcode.BarcodeType,System.IO.Stream)">
            <summary>
            Outputs a barcode of the specified type to a Stream object.
            </summary>
        </member>
        <member name="P:General.Utilities.Barcode.BarcodeGenerator.BackgroundColor">
            <summary>
            Modify the barcode background color
            </summary>
        </member>
        <member name="P:General.Utilities.Barcode.BarcodeGenerator.FontColor">
            <summary>
            Modify the barcode font color
            </summary>
        </member>
        <member name="P:General.Utilities.Barcode.BarcodeGenerator.FontSize">
            <summary>
            Modify the barcode font size
            </summary>
        </member>
        <member name="T:General.Utilities.Barcode.BarcodeType">
            <summary>
            Enumerates possible barcode formats
            </summary>
        </member>
        <member name="F:General.Utilities.Barcode.BarcodeType.Code39">
            <summary>
            Code 39
            </summary>
        </member>
        <member name="F:General.Utilities.Barcode.BarcodeType.Code39Extended">
            <summary>
            Code 39 Extended
            Supports alphanumeric data
            </summary>
        </member>
        <member name="T:General.Utilities.Data.Caching.CachingTools">
            <summary>
            Tools that allow the serialization and storage of any type of data.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Caching.CachingTools.#ctor">
            <summary>
            This constructor is not used. All methods are static.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Caching.CachingTools.Save(System.Object,System.String,General.Utilities.Data.Caching.CachePersistance,System.DateTime)">
            <summary>
            Saves an object or piece of data to the Caching System.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Caching.CachingTools.Save(System.Object,System.String,General.Utilities.Data.Caching.CachePersistance)">
            <summary>
            Overload for the save method.
            Sends null as the expiration date.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Caching.CachingTools.Get(System.String,General.Utilities.Data.Caching.CachePersistance)">
            <summary>
            Retrieves an object or piece of data from the Caching System.
            </summary>
        </member>
        <member name="T:General.Utilities.Data.Caching.CachePersistance">
            <summary>
            Enumerates cache persistance options
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Caching.CachePersistance.Session">
            <summary>
            Saves object to ASP.Net session, also backs up in cookie on users machine in case of application restart.
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Caching.CachePersistance.SessionNoCookie">
            <summary>
            Saves object to ASP.Net session, does not backup to cookie.
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Caching.CachePersistance.SessionCache">
            <summary>
            Saves object to ASP.Net cache using a generated key, only the key is stored in the session backed with a cookie.
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Caching.CachePersistance.Machine">
            <summary>
            Saves object to ASP.Net session, and stores it in a cookie that is not linked to the session.
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Caching.CachePersistance.MachineOnly">
            <summary>
            Saves object to cookie on users machine, does not save to ASP.Net session.
            </summary>
        </member>
        <member name="T:General.Utilities.Data.Conversion.access_tools">
            <summary>
            Summary description for access_tools.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.access_tools.#ctor">
            <summary>
            Summary description for access_tools.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.access_tools.create_mdb_file(System.Data.DataSet,System.String,System.String)">
            <summary>
            Create access database file
            </summary>
        </member>
        <member name="T:General.Utilities.Data.Conversion.export_tools">
            <summary>
            Summary description for export_tools.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.export_tools.#ctor">
            <summary>
            export_tools.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.export_tools.export_data(General.Utilities.Data.Conversion.data_table_export_format,System.Data.DataSet,System.String)">
            <summary>
            export_data
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.export_tools.ExportDataSetIntoResponse(System.Data.DataSet,VM.xPort.ExportTable[],VM.xPort.xpOutputFormat,System.Boolean,System.Boolean,VM.xPort.DS2XL,System.String)">
            <summary>
            Export data from source DataSet to browser's response.
            </summary>
            <param name="datasetToExport">Source DataSet to export data from.</param>
            <param name="tablesToExport">List of DataTables inside of DataSet to export data from.</param>
            <param name="outputFormat">Output export format.</param>
            <param name="exportHeaders">Specifies if we need to export column names.</param>
            <param name="exportIntoStream">Specifies if we want to export data into some stream first.</param>
            <param name="xportToolsDemo">Exporter class instance.</param>
            <remarks></remarks>
        </member>
        <member name="M:General.Utilities.Data.Conversion.export_tools.ReleaseGlobalResources">
            <summary>
            Closes and releases all resources (variables) declared on page level
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:General.Utilities.Data.Conversion.data_table_export_format">
            <summary>
            data_table_export_format
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Conversion.data_table_export_format.xls">
            <summary>
            Excel
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Conversion.data_table_export_format.mdb">
            <summary>
            Access
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Conversion.data_table_export_format.csv">
            <summary>
            Comma Delimited
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Conversion.data_table_export_format.txt">
            <summary>
            Tab Delimited
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Conversion.data_table_export_format.xml">
            <summary>
            XML File
            </summary>
        </member>
        <member name="T:General.Utilities.Data.Conversion.oledb">
            <summary>
            Summary description for oledb.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.oledb.#ctor">
            <summary>
            Summary description for oledb.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.oledb.insert_dataset(System.Data.DataSet,System.Data.OleDb.OleDbCommand)">
            <summary>
            Transfers the contents of a DataSet to an OLEDB destination
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.oledb.insert_table(System.Data.DataTable,System.Data.OleDb.OleDbCommand)">
            <summary>
            Transfers the contents of a DataTable to an OLEDB destination
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.oledb.insert_table(System.Data.DataView,System.Data.OleDb.OleDbCommand)">
            <summary>
            Transfers the contents of a DataView to an OLEDB destination
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.dBaseReader.IsNumber(System.String)">
            <summary>
            Simple function to test is a string can be parsed. There may be a better way, but this works
            If you port this to .NET 2.0, use the new TryParse methods instead of this
              *Thanks to wu.qingman on code project for fixing a bug in this for me
            </summary>
            <param name="number">string to test for parsing</param>
            <returns>true if string can be parsed</returns>
        </member>
        <member name="M:General.Utilities.Data.Conversion.dBaseReader.JulianToDateTime(System.Int64)">
            <summary>
            Convert a Julian Date to a .NET DateTime structure
            Implemented from pseudo code at http://en.wikipedia.org/wiki/Julian_day
            </summary>
            <param name="lJDN">Julian Date to convert (days since 01/01/4713 BC)</param>
            <returns>DateTime</returns>
        </member>
        <member name="T:General.Utilities.Data.Conversion.text_tools">
            <summary>
            Summary description for text_tools.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.text_tools.#ctor">
            <summary>
            Summary description for text_tools.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.text_tools.create_txt_file(System.Data.DataSet,System.String)">
            <summary>
            Create text delimited file from DataSet
            </summary>
        </member>
        <member name="M:General.Utilities.Data.Conversion.text_tools.create_txt_file(System.Data.DataSet,System.String,General.Utilities.Data.Conversion.txt_data_type,System.String,System.Boolean)">
            <summary>
            Create text delimited file from DataSet
            </summary>
        </member>
        <member name="T:General.Utilities.Data.Conversion.txt_data_type">
            <summary>
            Text delimited data types
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Conversion.txt_data_type.csv">
            <summary>
            Comma seperated values
            </summary>
        </member>
        <member name="F:General.Utilities.Data.Conversion.txt_data_type.tab">
            <summary>
            Tab seperated values
            </summary>
        </member>
        <member name="T:General.Utilities.Data.DataConversions">
            <summary>
            Helper class that contains methods and functions to convert data from one format to another
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertCurrencyToNumeric(System.String)">
            <summary>
            Converts the currency value to a numeric value. Acceptable values are $1,000.00, 123.45, $50
            Function converts $1,234.56 to 1234.56.
            </summary>
            <param name="strCurrencyValue">The currency value</param>
            <returns>A double representing the dollar amount and any cents</returns>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertEmptyStringToZero(System.String)">
            <summary>
            Local method to convert incoming string values to string zero (0)
            </summary>
            <param name="strValue">The string value to evaluate</param>
            <returns>Either "0", or the string passed in</returns>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertNullStringToEmptyString(System.String)">
            <summary>
            Converts a Null string value to a useable empty string.
            </summary>
            <remarks>This is needed in several situations when assigning fields the value of a db field</remarks>
            <param name="strField">The DB field to check</param>
            <returns>Non-null empty string or original value passed</returns>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertEmptyStringToDBNull(System.String)">
            <summary>
            Converts a Null string value to a DBNull value.
            </summary>
            <remarks>This is needed in several situations when assigning fields the value of a db field</remarks>
            <param name="strField">The DB field to check</param>
            <returns>DBNull or original values passed</returns>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertDBNullToEmptyString(System.Object)">
            <summary>
            Converts a DB Null value to a useable empty string.
            </summary>
            <remarks>This is needed in several situations when assigning fields the value of a db field</remarks>
            <param name="objField">The DB field to check</param>
            <returns>Empty string or original values passed</returns>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertDBNullToZero(System.Object)">
            <summary>
            Converts a DB Null value to a useable 0.
            </summary>
            <remarks>This is needed in several situations when assigning fields the value of a db field</remarks>
            <param name="objField">The DB field to check</param>
            <returns>Zero (0) or original values passed</returns>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertDBNullToNumeric(System.Object,System.Int32)">
            <summary>
            Converts a DB Null value to a useable 0.
            </summary>
            <remarks>This is needed in several situations when assigning fields the value of a db field</remarks>
            <param name="objField">The DB field to check</param>
            <param name="intDefaultValue">The numeric value to default to</param>
            <returns>Zero (0) or original values passed</returns>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertYNToBoolean(System.String,System.Boolean)">
            <summary>
            Converts a "y" or an "n" to a boolean.
            </summary>
            <param name="str">string - Y = true and N = false</param>
            <param name="blnDefault">bool - Default value if Y or N is not found</param>
            <returns>bool</returns>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertYNToBoolean(System.String)">
            <summary>
            Converts a "y" or an "n" to a boolean. Sends a default of false.
            </summary>
            <param name="str">string - Y = true and N = false</param>
            <returns>bool</returns>
        </member>
        <member name="M:General.Utilities.Data.DataConversions.ConvertYNToBoolean(System.Char)">
            <summary>
            Converts a 'y' or an 'n' to a boolean. Allows the
            ConvertYNToBoolean(string) overload to decide on the default.
            </summary>
            <param name="chr">char - 'Y' = true and 'N' = false</param>
            <returns>bool</returns>
        </member>
        <member name="T:General.Utilities.Data.DataFormatting">
            <summary>
            Helper class that contains methods and functions to format and clean data
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataFormatting.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataFormatting.AdjustCaseToCapsLower(System.String)">
            <summary>
            Adjusts the case of the string passed in.
            </summary>
            <remarks>The string passed in will take on the following format: Xxxx y Zzzzz</remarks>
            <example>
            string strField = "I like to TEST THingS for FUN!!!"
            strField = AdjustCase(strField)
            returned:   "I Like To Test Things For Fun!!!"
            </example>
        </member>
        <member name="M:General.Utilities.Data.DataFormatting.FixSingleQuotes(System.String)">
            <summary>
            Adds an escape character to any occurrences of the single quote character
            in the passed string. This is used to avoid breaking concatenated commands 
            in SQL used by search pages. 
            </summary>
            <param name="sInputValue">The input string to be modified</param>
            <returns>The input string formatted with escape characters as needed</returns>
        </member>
        <member name="M:General.Utilities.Data.DataFormatting.FixDoubleQuotes(System.String)">
            <summary>
            Removes the escape character to any occurrences of the double-single quote character ('')
            in the returned string. This is used to avoid displaying two single quotes when only one
            was originally entered.
            </summary>
            <param name="sInputValue">The input string to be modified</param>
            <returns>The input string formatted with escape characters as needed</returns>
        </member>
        <member name="M:General.Utilities.Data.DataFormatting.FixDoubleQuotesInDataSet(System.Data.DataSet)">
            <summary>
            Replaces '' with ' in every table, row, and cell of the DataSet passed to the function.
            </summary>
            <param name="DS"></param>
            <returns></returns>
        </member>
        <member name="M:General.Utilities.Data.DataFormatting.FixDoubleQuotesInDataTable(System.Data.DataTable)">
            <summary>
            Replaces '' with ' in every table, row, and cell of the DataSet passed to the function.
            </summary>
            <param name="DT"></param>
            <returns></returns>
        </member>
        <member name="T:General.Utilities.Data.DataSetUtilities">
            <summary>
            This is a collection of utilities that are useful for Selecting
            records within a DataSet.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.#ctor">
            <summary>
            This is a collection of utilities that are useful for Selecting
            records within a DataSet.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.SelectDistinct(System.Data.DataTable,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Provides the ability to select all distinct values in a dataset. This closely mimics the T-SQL
            command DISTINCT as in:
               select DISTINCT id from tbl
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.SelectDistinct(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            An overload of SelectDistinct
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.SelectDistinct(System.Data.DataTable,System.Int32,System.String,System.String)">
            <summary>
            An overload of SelectDistinct
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.SelectDistinct(System.Data.DataRow[],System.Data.DataColumnCollection,System.Int32,System.String)">
            <summary>
            An overload of SelectDistinct
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.SelectDistinct(System.Data.DataRow[],System.Data.DataColumnCollection,System.Int32,System.String,System.String)">
            <summary>
            An overload of SelectDistinct
            </summary>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.DataRowValue(System.Data.DataRow,System.String[],System.String)">
            <summary>
            Returns the value of ONE out of an array of DataRow fields. This method was developed
            to support objects that may possibly receive data from multiple sources and could
            possible call the fields something different. The return type of this method is
            determined by the DEFAULT field. What ever data type that field is will be the data type
            returned.
            </summary>
            <param name="dr">DataRow - The data row to pull the field from</param>
            <param name="aStrColumns">string[] - An array of field names to attempt pulling the data from</param>
            <param name="strDefault">string - A default value to use if none of the fields are found.</param>
            <returns>string</returns>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.DataRowValue(System.Data.DataRow,System.String[],System.Int32)">
            <summary>
            Returns the value of ONE out of an array of DataRow fields. This method was developed
            to support objects that may possibly receive data from multiple sources and could
            possible call the fields something different. The return type of this method is
            determined by the DEFAULT field. What ever data type that field is will be the data type
            returned.
            </summary>
            <param name="dr">DataRow - The data row to pull the field from</param>
            <param name="aStrColumns">string[] - An array of field names to attempt pulling the data from</param>
            <param name="intDefault">int - A default value to use if none of the fields are found.</param>
            <returns>int</returns>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.DataRowValue(System.Data.DataRow,System.String[],System.Int64)">
            <summary>
            Returns the value of ONE out of an array of DataRow fields. This method was developed
            to support objects that may possibly receive data from multiple sources and could
            possible call the fields something different. The return type of this method is
            determined by the DEFAULT field. What ever data type that field is will be the data type
            returned.
            </summary>
            <param name="dr">DataRow - The data row to pull the field from</param>
            <param name="aStrColumns">string[] - An array of field names to attempt pulling the data from</param>
            <param name="intDefault">long - A default value to use if none of the fields are found.</param>
            <returns>long</returns>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.DataRowValue(System.Data.DataRow,System.String[],System.Double)">
            <summary>
            Returns the value of ONE out of an array of DataRow fields. This method was developed
            to support objects that may possibly receive data from multiple sources and could
            possible call the fields something different. The return type of this method is
            determined by the DEFAULT field. What ever data type that field is will be the data type
            returned.
            </summary>
            <param name="dr">DataRow - The data row to pull the field from</param>
            <param name="aStrColumns">string[] - An array of field names to attempt pulling the data from</param>
            <param name="dblDefault">double - A default value to use if none of the fields are found.</param>
            <returns>double</returns>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.DataRowValue(System.Data.DataRow,System.String[],System.Boolean)">
            <summary>
            Returns the value of ONE out of an array of DataRow fields. This method was developed
            to support objects that may possibly receive data from multiple sources and could
            possible call the fields something different. The return type of this method is
            determined by the DEFAULT field. What ever data type that field is will be the data type
            returned.
            </summary>
            <param name="dr">DataRow - The data row to pull the field from</param>
            <param name="aStrColumns">string[] - An array of field names to attempt pulling the data from</param>
            <param name="blnDefault">boolean - A default value to use if none of the fields are found.</param>
            <returns>bool</returns>
        </member>
        <member name="M:General.Utilities.Data.DataSetUtilities.DataRowValue(System.Data.DataRow,System.String[],System.DateTime)">
            <summary>
            Returns the value of ONE out of an array of DataRow fields. This method was developed
            to support objects that may possibly receive data from multiple sources and could
            possible call the fields something different. The return type of this method is
            determined by the DEFAULT field. What ever data type that field is will be the data type
            returned.
            </summary>
            <param name="dr">DataRow - The data row to pull the field from</param>
            <param name="aStrColumns">string[] - An array of field names to attempt pulling the data from</param>
            <param name="dtDefault">DateTime - A default value to use if none of the fields are found.</param>
            <returns>DateTime</returns>
        </member>
        <member name="T:General.Utilities.Data.FIFOStack">
            <summary>
            First In Last Out (FIFO) stack that only accepts Google.SiteMapURL objects.
            </summary>
        </member>
        <member name="M:General.Utilities.Data.FIFOStack.Push(System.Object)">
            <summary>
            Appends a new SiteMapURL object to the top of the stack.
            </summary>
            <param name="item">object</param>
        </member>
        <member name="M:General.Utilities.Data.FIFOStack.Pop">
            <summary>
            Removes the bottom SiteMapURL object from the stack and returns it.
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:General.Utilities.Data.FIFOStack.Clear">
            <summary>
            Clears the stack.
            </summary>
        </member>
        <member name="T:General.Utilities.Data.ValidationManager">
            <summary>
            Central location for validation routines that are generic enough to be used across multiple
            pages and methods
            </summary>
        </member>
        <member name="M:General.Utilities.Data.ValidationManager.#ctor">
            <summary>
            Default Constructor 
            </summary>
        </member>
        <member name="M:General.Utilities.Data.ValidationManager.ValidateDecimalFormat(System.String)">
            <summary>
            Validate passed string is a valid Decimal format
            </summary>
        </member>
        <member name="M:General.Utilities.Data.ValidationManager.ValidateNumericFormat(System.String)">
            <summary>
            Validate passed string is a valid Numeric format
            </summary>
        </member>
        <member name="T:General.Utilities.Date.BusinessDay">
            <summary>
            Class for working with Business Days
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.#ctor">
            <summary>
            Class for working with Business Days
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.Parse(System.DateTime)">
            <summary>
            Returns the nearest business day to the given date, or the given value when it is a business day.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.Next">
            <summary>
            Returns the next business day.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.Next(System.DateTime)">
            <summary>
            Returns the next business day.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.Previous">
            <summary>
            Returns the previous business day.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.Previous(System.DateTime)">
            <summary>
            Returns the previous business day.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.Current">
            <summary>
            Returns the nearest business day to the current date, or the current date when it is a business day.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.Test(System.DateTime)">
            <summary>
            Returns true if the given date is a business day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.Add(System.Int32)">
            <summary>
            Adds a number of business days and returns a new date
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.Add(System.DateTime,System.Int32)">
            <summary>
            Adds a number of business days and returns a new date
            </summary>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.CountBusinessDays(System.DateTime,System.DateTime)">
            <summary>
            Calulates Business Days within the given range of days.
            Start date and End date inclusive.
            </summary>
            <param name="StartDate">Datetime object 
            containing Starting Date</param>
            <param name="EndDate">Datetime object containing 
            End Date</param>
            <returns></returns>
        </member>
        <member name="M:General.Utilities.Date.BusinessDay.CountBusinessDays(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Calulates Business Days within the given range of days.
            Start date and End date inclusive.
            </summary>
            <param name="StartDate">Datetime object 
            containing Starting Date</param>
            <param name="EndDate">Datetime object containing 
            End Date</param>
            <param name="BusinessDaysPerWeek">integer denoting No of Business 
            Day in a week</param>
            <returns></returns>
        </member>
        <member name="T:General.Utilities.Date.DateTools">
            <summary>
            Tools for working with DateTime objects
            </summary>
        </member>
        <member name="M:General.Utilities.Date.DateTools.GetRFC822Date(System.DateTime)">
            <summary>
            Converts a regular DateTime to a RFC822 date string.
            </summary>
            <returns>The specified date formatted as a RFC822 date string.</returns>
        </member>
        <member name="M:General.Utilities.Date.DateTools.GetWeeks(System.DateTime,System.DateTime)">
            <summary>
            Calculate weeks between starting date and ending date
            </summary>
            <param name="stdate"></param>
            <param name="eddate"></param>
            <returns></returns>
        </member>
        <member name="M:General.Utilities.Date.DateTools.DateDiff(System.String,System.DateTime,System.DateTime)">
            <summary>
            Mimic the Implementation of DateDiff function of VB.Net.
            Note : Number of Year/Month is calculated
                   as how many times you have crossed the boundry.
            e.g. if you say starting date is 29/01/2005
                   and 01/02/2005 the year will be 0,month will be 1.
            
            </summary>
            <param name="datePart">specifies on which part 
              of the date to calculate the difference </param>
            <param name="startDate">Datetime object containing
              the beginning date for the calculation</param>
            <param name="endDate">Datetime object containing
              the ending date for the calculation</param>
            <returns></returns>
        </member>
        <member name="M:General.Utilities.Date.DateTools.Age(System.DateTime,System.DateTime)">
            <summary>
            Calculate Age on given date.
            Calculates as Years, Months and Days.
            </summary>
            <param name="DOB">Datetime object 
            containing DOB value</param>
            <param name="OnDate">Datetime object containing given 
            date, for which we need to calculate the age</param>
            <returns></returns>
        </member>
        <member name="M:General.Utilities.Date.DateTools.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Determines whether or not a specified date is between two other dates.
            </summary>
            <param name="dtSubject">DateTime - The subject date</param>
            <param name="dtStart">DateTime - The start date</param>
            <param name="dtEnd">DateTime - The end date</param>
            <returns>bool</returns>
        </member>
        <member name="T:General.Utilities.Date.Holidays">
            <summary>
            Summary description for Holidays.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.#ctor(System.Int32)">
            <summary>
            Creates a Months collection.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.GetEnumerator">
            <summary>
            Gets the Enumerator object
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:General.Utilities.Date.Holidays.Reset">
            <summary>
            Resets the enumeration index
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.MoveNext">
            <summary>
            Moves to the next object in the enumeration
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:General.Utilities.Date.Holidays.ChristmasDay(System.Int32)">
            <summary>
            Returns Christmas Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.ChristmasHoliday(System.Int32)">
            <summary>
            Returns Christmas Holiday
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IndependenceDay(System.Int32)">
            <summary>
            Returs true if the given date is Independance Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IndependenceHoliday(System.Int32)">
            <summary>
            Returs true if the given date is the observed Independance Holiday, this could be before or after July 4th if Indepandance Day falls on a weekend.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.NewYearsDay(System.Int32)">
            <summary>
            Returs true if the given date is New Years Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.NewYearsHoliday(System.Int32)">
            <summary>
            Returs true if the given date is the observed New Years Holiday, this could be before or after January 1st if New Years falls on a weekend.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.ThanksgivingDay(System.Int32)">
            <summary>
            Returs true if the given date is Thanksgiving Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.MartinLutherKingDay(System.Int32)">
            <summary>
            Returs true if the given date is Martin Luther King Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.MemorialDay(System.Int32)">
            <summary>
            Returs true if the given date is Memorial Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.PresidentsDay(System.Int32)">
            <summary>
            Returs true if the given date is Presidents Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.LaborDay(System.Int32)">
            <summary>
            Returs true if the given date is Labor Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.ColumbusDay(System.Int32)">
            <summary>
            Returs true if the given date is Columbus Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsChristmasDay(System.DateTime)">
            <summary>
            Returs true if the given date is Christmas Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsChristmasHoliday(System.DateTime)">
            <summary>
            Returs true if the given date is the observed Christmas Holiday, this could be before or after December 25th if Christmas day falls on a weekend.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsIndependenceDay(System.DateTime)">
            <summary>
            Returs true if the given date is Independance Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsIndependenceHoliday(System.DateTime)">
            <summary>
            Returs true if the given date is the observed Independance Holiday, this could be before or after July 4th if Indepandance Day falls on a weekend.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsNewYearsDay(System.DateTime)">
            <summary>
            Returs true if the given date is New Years Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsNewYearsHoliday(System.DateTime)">
            <summary>
            Returs true if the given date is the observed New Years Holiday, this could be before or after January 1st if New Years falls on a weekend.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsThanksgiving(System.DateTime)">
            <summary>
            Returs true if the given date is Thanksgiving Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsMartinLutherKingDay(System.DateTime)">
            <summary>
            Returs true if the given date is Martin Luther King Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsMemorialDay(System.DateTime)">
            <summary>
            Returs true if the given date is Memorial Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsPresidentsDay(System.DateTime)">
            <summary>
            Returs true if the given date is Presidents Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsLaborDay(System.DateTime)">
            <summary>
            Returs true if the given date is Labor Day
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holidays.IsColumbusDay(System.DateTime)">
            <summary>
            Returs true if the given date is Columbus Day
            </summary>
        </member>
        <member name="P:General.Utilities.Date.Holidays.Count">
            <summary>
            Returns the number of items in the collection
            </summary>
            <returns>int</returns>
        </member>
        <member name="P:General.Utilities.Date.Holidays.Item(System.Int32)">
            <summary>
            Returns the Month at the specified index
            </summary>
            <returns>Month</returns>
        </member>
        <member name="P:General.Utilities.Date.Holidays.Current">
            <summary>
            Gets the current object
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:General.Utilities.Date.Holiday">
            <summary>
            Represents an individual Holiday.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Holiday.CreateHoliday(General.Utilities.Date.HolidayTypes,System.Int32)">
            <summary>
            Creates a Holiday using the passed in parameters
            </summary>
            <param name="dtValue">DateTime - The date of the holiday</param>
            <param name="strName">String - The name of the holiday</param>
            <returns>Holiday</returns>
        </member>
        <member name="T:General.Utilities.Date.Months">
            <summary>
            General definition of a Collection of Months.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Months.#ctor">
            <summary>
            Creates a Months collection.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Months.GetEnumerator">
            <summary>
            Gets the Enumerator object
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:General.Utilities.Date.Months.Reset">
            <summary>
            Resets the enumeration index
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Months.MoveNext">
            <summary>
            Moves to the next object in the enumeration
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:General.Utilities.Date.Months.Count">
            <summary>
            Returns the number of items in the collection
            </summary>
            <returns>int</returns>
        </member>
        <member name="P:General.Utilities.Date.Months.Item(System.Int32)">
            <summary>
            Returns the Month at the specified index
            </summary>
            <returns>Month</returns>
        </member>
        <member name="P:General.Utilities.Date.Months.Current">
            <summary>
            Gets the current object
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:General.Utilities.Date.Month">
            <summary>
            Represents an individual month.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Month.CreateMonth(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a month using the passed in Leap parameter
            </summary>
            <param name="strValue">string - The two digit month value</param>
            <param name="strName">string - The full name of the month</param>
            <param name="strAbbreviation">string - The digit abbreviation for the month (up to 4 digits)</param>
            <param name="intDays">int - The number of days in the month for a non-leap year</param>
            <param name="blnLeap">bool - Whether or not the month is affected by leap year</param>
            <returns>Month</returns>
        </member>
        <member name="M:General.Utilities.Date.Month.CreateMonth(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a month that is not affected by leap year
            </summary>
            <param name="strValue">string - The two digit month value</param>
            <param name="strName">string - The full name of the month</param>
            <param name="strAbbreviation">string - The digit abbreviation for the month (up to 4 digits)</param>
            <param name="intDays">int - The number of days in the month for a non-leap year</param>
            <returns>Month</returns>
        </member>
        <member name="T:General.Utilities.Date.Years">
            <summary>
            General definition of a Collection of Months.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Years.#ctor">
            <summary>
            Creates a Years collection.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Years.GetEnumerator">
            <summary>
            Gets the Enumerator object
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:General.Utilities.Date.Years.Reset">
            <summary>
            Resets the enumeration index
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Years.MoveNext">
            <summary>
            Moves to the next object in the enumeration
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:General.Utilities.Date.Years.Count">
            <summary>
            Returns the number of items in the collection
            </summary>
            <returns>int</returns>
        </member>
        <member name="P:General.Utilities.Date.Years.Item(System.Int32)">
            <summary>
            Returns the Month at the specified index
            </summary>
            <returns>Month</returns>
        </member>
        <member name="P:General.Utilities.Date.Years.Current">
            <summary>
            Gets the current object
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:General.Utilities.Date.Year">
            <summary>
            Represents an individual month.
            </summary>
        </member>
        <member name="M:General.Utilities.Date.Year.CreateYear(System.Int32)">
            <summary>
            Creates a month using the passed in Leap parameter
            </summary>
            <param name="intValue">string - The two digit month value</param>
            <returns>Year</returns>
        </member>
        <member name="T:General.Debugging.CacheReporting">
            <summary>
            Contains static methods that report the contents of the Web Cache
            </summary>
        </member>
        <member name="M:General.Debugging.CacheReporting.GetCacheReport">
            <summary>
            Returns an HTML Table listing all the objects in the Cache.
            </summary>
        </member>
        <member name="M:General.Debugging.CacheReporting.GetCacheReport(System.Boolean)">
            <summary>
            Returns an HTML Table listing all the objects in the Cache, and when requested their bytesize in memory.
            </summary>
        </member>
        <member name="M:General.Debugging.CacheReporting.#ctor">
            <summary>
            Contains static methods that report the contents of the Web Cache
            </summary>
        </member>
        <member name="T:General.Debugging.ControlCrawler">
            <summary>
            Summary description for ControlCrawler.
            </summary>
        </member>
        <member name="T:General.Debugging.DeathChecker">
            <summary>
            Summary description for DeathChecker.
            </summary>
        </member>
        <member name="T:General.Debugging.LoadTester">
            <summary>
            Summary description for LoadTester.
            </summary>
        </member>
        <member name="T:General.Debugging.Time">
            <summary>
            Summary description for Time.
            </summary>
        </member>
        <member name="T:General.Utilities.Drawing.ColorTools">
            <summary>
            ColorTools
            </summary>
        </member>
        <member name="M:General.Utilities.Drawing.ColorTools.#ctor">
            <summary>
            ColorTools
            </summary>
        </member>
        <member name="M:General.Utilities.Drawing.ColorTools.GetColorFromHtmlColor(System.String)">
            <summary>
            Returns Color object from an html color value (#FFFFFF)
            </summary>
        </member>
        <member name="T:General.Utilities.Encryption.EncryptionTools">
            <summary>
            RC4 Encryption
            </summary>
        </member>
        <member name="M:General.Utilities.Encryption.EncryptionTools.#ctor">
            <summary>
            RC4 Encryption
            </summary>
        </member>
        <member name="M:General.Utilities.Encryption.EncryptionTools.Encrypt(System.String)">
            <summary>
            Encrypt a string
            </summary>
        </member>
        <member name="M:General.Utilities.Encryption.EncryptionTools.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a string
            </summary>
        </member>
        <member name="M:General.Utilities.Encryption.EncryptionTools.Decrypt(System.String)">
            <summary>
            Decrypt a string
            </summary>
        </member>
        <member name="M:General.Utilities.Encryption.EncryptionTools.Decrypt(System.String,System.String)">
            <summary>
            Decrypt a string
            </summary>
        </member>
        <member name="T:General.Utilities.IO.CSVReader">
            <summary>
            A data-reader style interface for reading CSV files.
            </summary>
        </member>
        <member name="M:General.Utilities.IO.CSVReader.#ctor(System.IO.Stream)">
            <summary>
            Create a new reader for the given stream.
            </summary>
            <param name="s">The stream to read the CSV from.</param>
        </member>
        <member name="M:General.Utilities.IO.CSVReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Create a new reader for the given stream and encoding.
            </summary>
            <param name="s">The stream to read the CSV from.</param>
            <param name="enc">The encoding used.</param>
        </member>
        <member name="M:General.Utilities.IO.CSVReader.#ctor(System.String)">
            <summary>
            Creates a new reader for the given text file path.
            </summary>
            <param name="filename">The name of the file to be read.</param>
        </member>
        <member name="M:General.Utilities.IO.CSVReader.#ctor(System.String,System.Char)">
            <summary>
            Creates a new reader for the given text file path.
            </summary>
            <param name="filename">The name of the file to be read.</param>
        </member>
        <member name="M:General.Utilities.IO.CSVReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates a new reader for the given text file path and encoding.
            </summary>
            <param name="filename">The name of the file to be read.</param>
            <param name="enc">The encoding used.</param>
        </member>
        <member name="M:General.Utilities.IO.CSVReader.GetCSVLine">
            <summary>
            Returns the fields for the next row of CSV data (or null if at eof)
            </summary>
            <returns>A string array of fields or null if at the end of file.</returns>
        </member>
        <member name="M:General.Utilities.IO.CSVReader.Dispose">
            <summary>
            Disposes the CSVReader. The underlying stream is closed.
            </summary>
        </member>
        <member name="P:General.Utilities.IO.CSVReader.CurrentDataLine">
            <summary>
            Returns the current line in the CSV document
            </summary>
        </member>
        <member name="T:General.Utilities.IO.CSVReaderException">
            <summary>
            Exception class for CSVReader exceptions.
            </summary>
        </member>
        <member name="M:General.Utilities.IO.CSVReaderException.#ctor(System.String)">
            <summary>
            Constructs a new exception object with the given message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:General.Utilities.Serialization.SerializationTools">
            <summary>
            Serialize and Deserialize objects
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.#ctor">
            <summary>
            Serialize and Deserialize objects
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.FormatSize(System.Int64)">
            <summary>
            Formats a long integer representing a number of bytes into a more friendly format rounded to two decimal places
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.FormatSize(System.Int64,System.Int32)">
            <summary>
            Formats a long integer representing a number of bytes into a more friendly format
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.GetObjectByteSize(System.Object)">
            <summary>
            Returns the size in bytes of any object
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.GetObjectByteSize(System.String)">
            <summary>
            Returns the size in bytes of any string
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.GetObjectByteSize(System.Web.UI.Triplet)">
            <summary>
            Returns the size in bytes of any string
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.SerializeObject(System.Object)">
            <summary>
            Serialize object
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.SerializeObjectForXML(System.Object)">
            <summary>
            Serialize object
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.DeserializeObject(System.String)">
            <summary>
            Deserialize object
            </summary>
        </member>
        <member name="M:General.Utilities.Serialization.SerializationTools.DeserializeObject(System.String,System.String)">
            <summary>
            Deserialize object
            </summary>
        </member>
        <member name="T:General.Utilities.Text.AddressFormat">
            <summary>
            Text tools specific to address formatting.
            </summary>
        </member>
        <member name="M:General.Utilities.Text.AddressFormat.FullName(System.String,System.String,System.String)">
            <summary>
            Creates a Full Name out of a First, Last and Middle name.
            </summary>
            <param name="strFirstName">string - First Name</param>
            <param name="strLastName">string - Last Name</param>
            <param name="strMiddle">string - Middle Name or Initial</param>
            <returns>string</returns>
        </member>
        <member name="M:General.Utilities.Text.AddressFormat.FullName(System.String,System.String)">
            <summary>
            Creates a Full Name out of a First, Last.
            </summary>
            <param name="strFirstName">string - First Name</param>
            <param name="strLastName">string - Last Name</param>
            <returns>string</returns>
        </member>
        <member name="T:General.Utilities.Text.BoyerMoore">
            <summary>
            Class that implements Boyer-Moore and related exact string-matching algorithms
            </summary>
            <remarks>
            From "Handbook of exact string-matching algorithms"
              by Christian Charras and Thierry Lecroq
              chapter 15
            http://www-igm.univ-mlv.fr/~lecroq/string/node15.html#SECTION00150
            </remarks>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="pattern">Pattern for search</param>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.BuildBadCharacterShift(System.String)">
            <summary>
            Build the bad character shift array.
            </summary>
            <param name="pattern">Pattern for search</param>
            <returns>bad character shift array</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.FindSuffixes(System.String)">
            <summary>
            Find suffixes in the pattern
            </summary>
            <param name="pattern">Pattern for search</param>
            <returns>Suffix array</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.BuildGoodSuffixShift(System.String,System.Int32[])">
            <summary>
            Build the good suffix array.
            </summary>
            <param name="pattern">Pattern for search</param>
            <returns>Good suffix shift array</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.BCLMatch(System.String,System.Int32)">
            <summary>
            Return all matched of the pattern in the specified text using the .NET String.indexOf API
            </summary>
            <param name="text">text to be searched</param>
            <param name="startingIndex">Index at which search begins</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.BCLMatch(System.String)">
            <summary>
            Return all matched of the pattern in the specified text using the .NET String.indexOf API
            </summary>
            <param name="text">text to be searched</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.HorspoolMatch(System.String,System.Int32)">
            <summary>
            Return all matches of the pattern in specified text using the Horspool algorithm
            </summary>
            <param name="text">text to be searched</param>
            <param name="startingIndex">Index at which search begins</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.HorspoolMatch(System.String)">
            <summary>
            Return all matches of the pattern in specified text using the Horspool algorithm
            </summary>
            <param name="text">text to be searched</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.BoyerMooreMatch(System.String,System.Int32)">
            <summary>
            Return all matches of the pattern in specified text using the Boyer-Moore algorithm
            </summary>
            <param name="text">text to be searched</param>
            <param name="startingIndex">Index at which search begins</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.BoyerMooreMatch(System.String)">
            <summary>
            Return all matches of the pattern in specified text using the Boyer-Moore algorithm
            </summary>
            <param name="text">text to be searched</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.TurboBoyerMooreMatch(System.String,System.Int32)">
            <summary>
            Return all matches of the pattern in specified text using the Turbo Boyer-Moore algorithm
            </summary>
            <param name="text">text to be searched</param>
            <param name="startingIndex">Index at which search begins</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.TurboBoyerMooreMatch(System.String)">
            <summary>
            Return all matches of the pattern in specified text using the Turbo Boyer-Moore algorithm
            </summary>
            <param name="text">text to be searched</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.ApostolicoGiancarloMatch(System.String,System.Int32)">
            <summary>
            Return all matches of the pattern in specified text using the Apostolico-GiancarloMatch algorithm
            </summary>
            <param name="text">text to be searched</param>
            <param name="startingIndex">Index at which search begins</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="M:General.Utilities.Text.BoyerMoore.ApostolicoGiancarloMatch(System.String)">
            <summary>
            Return all matches of the pattern in specified text using the Apostolico-GiancarloMatch algorithm
            </summary>
            <param name="text">text to be searched</param>
            <returns>IEnumerable which returns the indexes of pattern matches</returns>
        </member>
        <member name="T:General.Utilities.Text.RegxLibrary">
            <summary>
            Contains a library of all Regular Expression used in a site.
            </summary>
        </member>
        <member name="M:General.Utilities.Text.RegxLibrary.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:General.Utilities.Text.RegxLibrary.PhoneNumberStdRegExPattern">
            <summary>
            Gets a regular expression validator for Standard US Phone Numbers
            </summary>
        </member>
        <member name="M:General.Utilities.Text.RegxLibrary.EmailStdRegExPattern">
            <summary>
            Gets a regular expression validator for Email Addresses
            </summary>
        </member>
        <member name="M:General.Utilities.Text.RegxLibrary.EmailAdvancedPattern">
            <summary>
            Gets a regular expression validator for Email Addresses
            </summary>
            <remarks>EX: d_n+nic@com.com|||dav@dav.com|||dn@da.v.id.ca</remarks>
        </member>
        <member name="M:General.Utilities.Text.RegxLibrary.LocalHostServerPattern">
            <summary>
            Gets a regular expression that matches local servers such as http://localhost:42234/
            </summary>
            <remarks>EX: http://localhost:42234, http://localhost:42234/Test.aspx </remarks>
        </member>
        <member name="T:General.Utilities.Text.Similarity.BipartiteMatcher">
            <summary>
            BipartiteMatcher
            </summary>
            
        </member>
        <member name="M:General.Utilities.Text.Similarity.BipartiteMatcher.#ctor(System.String[],System.String[],System.Single[0:,0:])">
            <summary>
            BipartiteMatcher
            </summary>
        </member>
        <member name="M:General.Utilities.Text.Similarity.BipartiteMatcher.GetScore">
            <summary>
            Calculate Similarity Score
            </summary>
        </member>
        <member name="P:General.Utilities.Text.Similarity.BipartiteMatcher.Score">
            <summary>
            Calculate Similarity Score
            </summary>
        </member>
        <member name="T:General.Utilities.Text.Similarity.ISimilarity">
            <summary>
            Summary description for ISimilarity.
            </summary>
        </member>
        <member name="T:General.Utilities.Text.Similarity.Leven">
            <summary>
            Summary description for Leven.
            </summary>
        </member>
        <member name="T:General.Utilities.Text.Similarity.Similarity">
            <summary>
            MatchMaker
            </summary>
            
        </member>
        <member name="T:General.Utilities.Text.Similarity.MatchsMaker">
            <summary>
            MatchMaker
            </summary>
        </member>
        <member name="M:General.Utilities.Text.Similarity.MatchsMaker.#ctor(System.String,System.String)">
            <summary>
            MatchMaker
            </summary>
        </member>
        <member name="M:General.Utilities.Text.Similarity.MatchsMaker.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            MatchMaker
            </summary>
        </member>
        <member name="M:General.Utilities.Text.Similarity.MatchsMaker.GetScore">
            <summary>
            Calculate Similarity Score
            </summary>
        </member>
        <member name="P:General.Utilities.Text.Similarity.MatchsMaker.Score">
            <summary>
            Calculate Similarity Score
            </summary>
        </member>
        <member name="T:General.Utilities.Text.Similarity.SimilarityTools">
            <summary>
            SimilarityTools
            </summary>
        </member>
        <member name="M:General.Utilities.Text.Similarity.SimilarityTools.#ctor">
            <summary>
            SimilarityTools
            </summary>
        </member>
        <member name="M:General.Utilities.Text.Similarity.SimilarityTools.GetSimilarity(System.String,System.String)">
            <summary>
            Returns a float between 0 and 1 to represent the similarity between two strings
            </summary>
        </member>
        <member name="T:General.Utilities.Text.Similarity.Tokeniser">
            <summary>
            Summary description for Tokeniser.
            Partition string off into subwords
            </summary>
        </member>
        <member name="T:General.Utilities.Text.TextToImage">
            <summary>
            Contains static methods that convert string of text into an image file.
            </summary>
        </member>
        <member name="M:General.Utilities.Text.TextToImage.#ctor">
            <summary>
            Contains static methods that convert string of text into an image file.
            </summary>
        </member>
        <member name="M:General.Utilities.Text.TextToImage.Save(System.IO.Stream,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Outputs a string of text to a stream as a Jpeg image
            </summary>
        </member>
        <member name="M:General.Utilities.Text.TextToImage.Save(System.IO.Stream,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Text.TextRenderingHint)">
            <summary>
            Outputs a string of text to a stream as a Jpeg image
            </summary>
        </member>
        <member name="M:General.Utilities.Text.TextToImage.Save(System.String,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Saves a string of text to a file as an image, the format is determined by the file extension.
            Supported extensions are *.bmp,*.jpg,*.jpeg,*.gif,*.png,*.tiff
            </summary>
        </member>
        <member name="M:General.Utilities.Text.TextToImage.Save(System.String,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Text.TextRenderingHint)">
            <summary>
            Saves a string of text to a file as an image, the format is determined by the file extension.
            Supported extensions are *.jpg,*.jpeg,*.gif,*.bmp,*.png,*.tiff
            </summary>
        </member>
        <member name="M:General.Utilities.Text.TextToImage.GetBitmap(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Text.TextRenderingHint)">
            <summary>
            Returns a Bitmap object representing the supplied text
            </summary>
        </member>
        <member name="T:General.Utilities.UI.SingleInstanceApplicationWithSystemTray">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="M:General.Utilities.UI.SingleInstanceApplicationWithSystemTray.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:General.Utilities.UI.SingleInstanceApplicationWithSystemTray.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:General.Utilities.UI.SingleInstanceApplicationWithSystemTray.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:General.Utilities.Validation.Password">
            <summary>
            Summary description for Password.
            </summary>
        </member>
        <member name="M:General.Utilities.Validation.Password.#ctor">
            <summary>
            Summary description for Password.
            </summary>
        </member>
        <member name="M:General.Utilities.Validation.Password.Validate(System.String)">
            <summary>
            This function validates a password string based on the following criteria.
            Passwords must be at least 8 characters in length.
            Passwords must have at least 3 of the following attributes.
            	- Lower Case Letters
            	- Upper Case Letters
            	- Numbers
            	- Characters i.e. !@#$%*?	
            </summary>
        </member>
        <member name="T:General.Utilities.Web.Compression">
            <summary>
            Removes line breaks, tabs, and comments from a text document consisting of HTML and/or Javascript
            </summary>
        </member>
        <member name="F:General.Utilities.Web.Compression.Log">
            <summary>
            Compression Log
            </summary>
        </member>
        <member name="M:General.Utilities.Web.Compression.#ctor">
            <summary>
            Compression
            </summary>
        </member>
        <member name="M:General.Utilities.Web.Compression.WebCompress(System.String)">
            <summary>
            Compress a string
            </summary>
        </member>
        <member name="M:General.Utilities.Web.Compression.WebCompress(System.String,General.Utilities.Web.Compression.EnumContentType)">
            <summary>
            Compress a string
            </summary>
        </member>
        <member name="M:General.Utilities.Web.Compression.WebCompress(System.String,System.Web.UI.HtmlTextWriter)">
            <summary>
            Compress a string and send to HtmlTextWriter
            </summary>
        </member>
        <member name="M:General.Utilities.Web.Compression.WebCompress(System.String,System.Web.UI.HtmlTextWriter,General.Utilities.Web.Compression.EnumContentType)">
            <summary>
            Compress a string and send to HtmlTextWriter
            </summary>
        </member>
        <member name="T:General.Utilities.Web.Compression.EnumContentType">
            <summary>
            Enumerates possible content types for web compression
            </summary>
        </member>
        <member name="F:General.Utilities.Web.Compression.EnumContentType.Mixed">
            <summary>
            HTML and Javascript
            </summary>
        </member>
        <member name="F:General.Utilities.Web.Compression.EnumContentType.Javascript">
            <summary>
            Javascript only
            </summary>
        </member>
        <member name="T:General.Utilities.Web.SOAPClient">
            <summary>
            Web Service Client
            </summary>
        </member>
        <member name="T:General.WordpressFunctions">
            <summary>
            Summary description for WordpressFunctions
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:General.WordpressFunctions.wpautop(System.String)" -->
        <member name="M:General.SimpleXMLNameValueCollection.GetEnumerator">
            <summary>
            Gets the Enumerator object
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:General.SimpleXMLNameValueCollection.Reset">
            <summary>
            Resets the enumeration index
            </summary>
        </member>
        <member name="M:General.SimpleXMLNameValueCollection.MoveNext">
            <summary>
            Moves to the next object in the enumeration
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:General.SimpleXMLNameValueCollection.Item(System.Int32)">
            <summary>
            Gets a value using an index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:General.SimpleXMLNameValueCollection.Item(System.String)">
            <summary>
            Gets or sets a value for the given key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:General.SimpleXMLNameValueCollection.Current">
            <summary>
            Gets the current object
            </summary>
            <returns>object</returns>
        </member>
    </members>
</doc>
